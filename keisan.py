import re
import math

class class文字式計算:
    def __init__(self, name, 入力文字式, 補正入力文字式, 字句解析リスト, 逆ポーランドリスト, 計算結果文字):
        self.name = name
        self.入力文字式 = 入力文字式
        self.補正入力文字式 = 補正入力文字式
        self.字句解析リスト = 字句解析リスト
        self.逆ポーランドリスト = 逆ポーランドリスト
        self.計算結果文字 = 計算結果文字

    def メソッド_文字式補正(self):
        """
        入力文字式の内容チェックと補正を行う
        適合文字の場合、補正入力文字式とエラー''が返る
        不適合文字がある場合、補正入力文字式''と、errエラーメッセージが返る
        """
        err = ''
        print(self.入力文字式)
        result, err = 関数_文字式補正(self.入力文字式)
        self.補正入力文字式 = result
        print('補正文字式, err', self.補正入力文字式, err)

        return self.補正入力文字式, err
    
    def メソッド_字句解析(self):
        """
        補正入力文字式をトークン（個々の文字）に分けて、字句解析リストに入れる。

        """
        err = ''
        result, err = 関数_字句取り出し(self.補正入力文字式)
        self.字句解析リスト = result    

        print('38字句解析リスト, err',self.字句解析リスト, err)
        return self.字句解析リスト, err
    
    def メソッド_逆ポーランド(self):
        """
        字句解析リストから、ひとつづつ取り出して、逆ポーランドの順に、逆ポーランドリストに入れる
        字句取り出し位置 : 取り出す字句の、字句解析リスト中のカラム位置。
        """

        print('字句解析リスト', self.字句解析リスト)

        字句取り出し位置 = 0
        self.逆ポーランドリスト, 字句取り出し位置, err = 関数_逆ポーランド(self.字句解析リスト, 字句取り出し位置)

        print('50逆ポーランドリスト, err', self.逆ポーランドリスト, err)
        return self.逆ポーランドリスト, err

    def メソッド_計算(self):
        """
        逆ポーランドリストから、数字、演算子を取り出して、演算をする。
        結果はself.計算結果文字。
        計算中にエラーが発生した場合、errでキャッチ。
        """

        self.計算結果文字, err = 関数_計算(self.逆ポーランドリスト)

        return self.計算結果文字, err

def 関数_文字式補正(数式文字):
    """
    数式文字の補正をする
    """
    err =''
# ()をエラーとする
    if '()' in 数式文字:
        err = 'エラー ()があります'
        print(err)
        return '', err
    
#逆ポーランドリスト作成のために、(-), (+) を(-1)*, (+1)*とする
    if '(-)' in 数式文字:
        数式文字 = 数式文字.replace('(-)', '(-1)*')
    
    if '(+)' in 数式文字:
        数式文字 = 数式文字.replace('(+)', '(+1)*')

    #逆ポーランドリスト作成のために、(-1)を(0-1), (+1)を(0+1) にする 
    print('18文字式', 数式文字)
    数式文字 = 数式文字.replace('(-', '(0-')
    数式文字 = 数式文字.replace('(+', '(0+')

    #√数字のパターンを作る √の前に、)　または数字、小数点.がある場合に、*(乗算)を入れる。そのための、パターン作成
    ルートptn = re.compile(r'([0-9.)]+)√')

    #正規表現の適合を調べる 適合結果は、検索結果　として取り出す
    検索結果全体 = ルートptn.findall(数式文字)
    for 検索結果 in 検索結果全体:
        print('検索結果',検索結果)

        # 検索結果は文字数字なので、置き換えは、'数字 or )√'　を　'数字 or ) + √' にする
        数式文字 = 数式文字.replace(検索結果+'√',検索結果+'*√')
        print('変換結果',数式文字)
    
    return 数式文字, err


def 関数_字句取り出し(文字式):
    """
    文字式を字句（トークン）に分けて、トークンリストに入れる。
    演算子は、1個ずつ、数字は、まとめて1個、指数表現は、Eと、その前後で３つに分けて入れる。
    －数値は、－を別にしていれる（0 - 数値)となる。
    演算子、数字以外がある場合、エラーとする。
    エラーの場合は、できたところまでの字句リストと、err('エラー内容')を返す
    """
    err = ''
    字句リスト = []
    数値ptn = re.compile(r'(^[.0-9]*)')
    演算子 = ['+', '-', '*', '/', '^', '(', ')', '√','E', 'e']

    while True:
        
        if len(文字式) == 0:
            return 字句リスト, err
        
        print('54',文字式)
        
        #先頭が数字か調べる
        results = 数値ptn.search(文字式)
        print('59', results)
        # print('56,演算子in', 文字式[0] in 演算子)
        #数値を取り出して、resultsに入れる
        if results:
            if results.group(1):
                result = results.group(1)
            # result0 = results.group(2)
                print('59 group(1)', result)
            #
            # 小数点が２つ以上か調べる。その場合、エラー表示をして、errで返す。
            # 字句解析
                if result.count('.') > 1:
                    err = 'エラー 小数点が２つ以上あります'
                    print('関数_字句取り出し',err) 
                    return 字句リスト, err

                字句リスト.append(result)
                文字式 = 文字式.lstrip(result)

                print('64文字式', 文字式)
                # print('67,演算子in', 文字式[0] in 演算子)

            elif 文字式[0] in 演算子:
            
                字句リスト.append(文字式[0])
                文字式 = 文字式[1:]
                print('69 文字式', 文字式)

            elif 文字式[0] == ' ': #空文字は、スキップする
                文字式 = 文字式[1:]

            else:
                err = 'エラー：数値、演算子以外の字が入っています'
                print('関数_字句取り出し', err)
        
                return 字句リスト, err

def 関数_逆ポーランド(字句リスト, 字句取り出し位置):
        err = ''
        ポーランドリスト = []
        挿入位置 = 0
        # 前_演算子優先度 = 6
        # 演算子後数値 = 0

        while True:
            if 字句取り出し位置 == len(字句リスト):
                break
            
            字句 = 字句リスト[字句取り出し位置]
            # 演算子優先度 = 関数_演算子優先度(トークン)
            print('44 字句', 字句)

            if 字句 == '(':
                字句取り出し位置 += 1
                挿入字句リスト, 字句取り出し位置, err = 関数_逆ポーランド(字句リスト, 字句取り出し位置)
                ポーランドリスト[挿入位置 : 挿入位置] = 挿入字句リスト
                挿入位置 += len(挿入字句リスト)

            if 字句 == ')':
                print('61ポーランドリスト,字句取り出し位置',ポーランドリスト,字句取り出し位置)
                return ポーランドリスト, 字句取り出し位置, err
            print('122 字句、挿入位置',字句, 挿入位置)

            if 関数_数値か判別(字句):

                while True:
                    if len(ポーランドリスト) <= 挿入位置:
                        break
                    if 関数_演算子優先度(字句) > 関数_演算子優先度(ポーランドリスト[挿入位置]):
                        break                        
                    if 関数_演算子優先度(字句) <= 関数_演算子優先度(ポーランドリスト[挿入位置]):
                        挿入位置 = 挿入位置+1

                ポーランドリスト.insert(挿入位置, 字句)
                print('ポーランドリスト',ポーランドリスト)

                print('55 挿入位置',挿入位置)

            if 字句 == '+' or 字句 == '-':
                print('62挿入位置',挿入位置)
                while True:
                    if len(ポーランドリスト) <= 挿入位置:
                        break
                    if 関数_演算子優先度(字句) > 関数_演算子優先度(ポーランドリスト[挿入位置]):
                        break                        
                    if 関数_演算子優先度(字句) <= 関数_演算子優先度(ポーランドリスト[挿入位置]):
                        挿入位置 = 挿入位置+1
                
                ポーランドリスト.insert(挿入位置, 字句)
                print('ポーランドリスト',ポーランドリスト)

                print('65 トークン 挿入位置',字句,挿入位置)
                # 演算子後数値 = 0
            
            if 字句 == '*' or 字句 == '/':
                print('79',len(ポーランドリスト), 挿入位置)
                
                while True:
                    if len(ポーランドリスト) <= 挿入位置:
                        break
                    if 関数_演算子優先度(字句) > 関数_演算子優先度(ポーランドリスト[挿入位置]):
                        break                        
                    if 関数_演算子優先度(字句) <= 関数_演算子優先度(ポーランドリスト[挿入位置]):
                        挿入位置 = 挿入位置+1
                        
                ポーランドリスト.insert(挿入位置, 字句)
                print('ポーランドリスト',ポーランドリスト)


            if 字句 == '^':
                print('79',len(ポーランドリスト), 挿入位置)

                while True:
                    if len(ポーランドリスト) <= 挿入位置:
                        break
                    if 関数_演算子優先度(字句) > 関数_演算子優先度(ポーランドリスト[挿入位置]):
                        break                        
                    if 関数_演算子優先度(字句) <= 関数_演算子優先度(ポーランドリスト[挿入位置]):
                        挿入位置 = 挿入位置+1
            
                
                ポーランドリスト.insert(挿入位置, 字句)
                print('ポーランドリスト',ポーランドリスト)

            if 字句 == '√':
                print('79',len(ポーランドリスト), 挿入位置)
                
                while True:
                    if len(ポーランドリスト) <= 挿入位置:
                        break
                    if 関数_演算子優先度(字句) > 関数_演算子優先度(ポーランドリスト[挿入位置]):
                        break                        
                    if 関数_演算子優先度(字句) <= 関数_演算子優先度(ポーランドリスト[挿入位置]):
                        挿入位置 = 挿入位置+1
                    print('213,関数_演算子優先度(字句), 関数_演算子優先度(ポーランドリスト[挿入位置])',挿入位置,関数_演算子優先度(字句),関数_演算子優先度(ポーランドリスト[挿入位置]))

                ポーランドリスト.insert(挿入位置, 字句)
                print('ポーランドリスト',ポーランドリスト)
                
            if 字句 == 'E' or 字句 == 'e':
                print('207 E',len(ポーランドリスト), 挿入位置)
                
                while True:
                    
                    if len(ポーランドリスト) <= 挿入位置:
                        print('a')
                        break
                    if 関数_演算子優先度(字句) > 関数_演算子優先度(ポーランドリスト[挿入位置]):
                        print('b')
                        break                        
                    if 関数_演算子優先度(字句) <= 関数_演算子優先度(ポーランドリスト[挿入位置]):
                        print('c')
                        挿入位置 = 挿入位置+1
                        print('d')
                        print('ポーランドリスト',ポーランドリスト)

                    
                print('223')
                ポーランドリスト.insert(挿入位置, 字句)
                print('ポーランドリスト',ポーランドリスト)

            字句取り出し位置 += 1

        print('127ポーランドリスト,トークン取り出し位置',ポーランドリスト,字句取り出し位置)
        return ポーランドリスト, 字句取り出し位置, err

def 関数_数値か判別(数値文字):
    if 数値文字.isdigit():
        return True
    if '.' in 数値文字:
        for 字 in 数値文字:
            if 字.isdigit() or 字 =='.':
                pass
            else:
                return False
            return True
        
        
def 関数_計算(ポーランドリスト):
        # for 要素 in self.逆ポーランドリスト:
        err = ''
        要素取り出し位置 = 0
        result = 0

        while True:

            要素 = ポーランドリスト[要素取り出し位置]
            if len(ポーランドリスト) == 1:
                break

            print('95 要素', 要素)
            if 要素 == '+':
                数値文字1 = ポーランドリスト[要素取り出し位置-2]
                数値文字2 = ポーランドリスト[要素取り出し位置-1]
                print('数値文字1,2',数値文字1,数値文字2)
                部分計算値 = 関数_加算(数値文字1, 数値文字2)
                ポーランドリスト[要素取り出し位置] = str(部分計算値)
                del ポーランドリスト[要素取り出し位置-2:要素取り出し位置]
                要素取り出し位置 -= 2
                # del self.逆ポーランドリスト[要素取り出し位置-2:要素取り出し位置-1]
                print('ポーランドリスト1回目計算後', ポーランドリスト)

            elif 要素 == '-':
                数値文字1 = ポーランドリスト[要素取り出し位置-2]
                数値文字2 = ポーランドリスト[要素取り出し位置-1]
                print('数値文字1,2',数値文字1,数値文字2)
                部分計算値 = 関数_減算(数値文字1, 数値文字2)
                ポーランドリスト[要素取り出し位置] = str(部分計算値)
                del ポーランドリスト[要素取り出し位置-2:要素取り出し位置]
                要素取り出し位置 -= 2
                # del self.逆ポーランドリスト[要素取り出し位置-2:要素取り出し位置-1]
                print('逆ポーランドリスト1回目計算後', ポーランドリスト)

            elif 要素 == '*':
                数値文字1 = ポーランドリスト[要素取り出し位置-2]
                数値文字2 = ポーランドリスト[要素取り出し位置-1]
                print('数値文字1,2',数値文字1,数値文字2)
                部分計算値 = 関数_乗算(数値文字1, 数値文字2)
                ポーランドリスト[要素取り出し位置] = str(部分計算値)
                # del self.逆ポーランドリスト[要素取り出し位置-2:要素取り出し位置]
                print('ポーランドリスト乗算計算後 要素取り出し位置', ポーランドリスト, 要素取り出し位置)
                del ポーランドリスト[要素取り出し位置-2:要素取り出し位置]
                要素取り出し位置 -= 2
                print('ポーランドリスト乗算計算後 要素取り出し位置', ポーランドリスト, 要素取り出し位置)

            elif 要素 == '/':
                数値文字1 = ポーランドリスト[要素取り出し位置-2]
                数値文字2 = ポーランドリスト[要素取り出し位置-1]
                print('数値文字1,2',数値文字1,数値文字2)
                部分計算値 = 関数_徐算(数値文字1, 数値文字2)
                ポーランドリスト[要素取り出し位置] = str(部分計算値)
                # del self.逆ポーランドリスト[要素取り出し位置-2:要素取り出し位置]
                print('ポーランドリスト乗算計算後 要素取り出し位置', ポーランドリスト, 要素取り出し位置)
                del ポーランドリスト[要素取り出し位置-2:要素取り出し位置]
                要素取り出し位置 -= 2
                print('ポーランドリスト乗算計算後 要素取り出し位置', ポーランドリスト, 要素取り出し位置)

            elif 要素 == '^':
                数値文字1 = ポーランドリスト[要素取り出し位置-2]
                数値文字2 = ポーランドリスト[要素取り出し位置-1]
                print('数値文字1,2',数値文字1,数値文字2)
                部分計算値 = 関数_累乗算(数値文字1, 数値文字2)
                ポーランドリスト[要素取り出し位置] = str(部分計算値)
                # del self.逆ポーランドリスト[要素取り出し位置-2:要素取り出し位置]
                print('ポーランドリスト乗算計算後 要素取り出し位置', ポーランドリスト, 要素取り出し位置)
                del ポーランドリスト[要素取り出し位置-2:要素取り出し位置]
                要素取り出し位置 -= 2
                print('ポーランドリスト乗算計算後 要素取り出し位置', ポーランドリスト, 要素取り出し位置)

            elif 要素 == '√':
                数値文字1 = ポーランドリスト[要素取り出し位置-1]
                print('数値文字1,',数値文字1)
                部分計算値 = 関数_ルート(数値文字1)

                if 部分計算値 == False:
                    return f'√内(-)のため計算できません。'
                
                ポーランドリスト[要素取り出し位置] = str(部分計算値)
                # del self.逆ポーランドリスト[要素取り出し位置-2:要素取り出し位置]
                print('ポーランドリスト乗算計算後 要素取り出し位置', ポーランドリスト, 要素取り出し位置)
                del ポーランドリスト[要素取り出し位置-1:要素取り出し位置]
                要素取り出し位置 -= 1
                print('ポーランドリスト乗算計算後 要素取り出し位置', ポーランドリスト, 要素取り出し位置)

            elif 要素 == 'E' or 要素 == 'e':
                数値文字1 = ポーランドリスト[要素取り出し位置-2]
                数値文字2 = ポーランドリスト[要素取り出し位置-1]
                print('数値文字1,',数値文字1)
                部分計算値 = 関数_指数表現(数値文字1, 数値文字2)

                if 部分計算値 == False:
                    return f'√内(-)のため計算できません。'
                
                ポーランドリスト[要素取り出し位置] = str(部分計算値)
                # del self.逆ポーランドリスト[要素取り出し位置-2:要素取り出し位置]
                print('ポーランドリスト乗算計算後 要素取り出し位置', ポーランドリスト, 要素取り出し位置)
                del ポーランドリスト[要素取り出し位置-2:要素取り出し位置]
                要素取り出し位置 -= 2
                print('ポーランドリスト指数計算後 要素取り出し位置', ポーランドリスト, 要素取り出し位置)

            else:
                要素取り出し位置 += 1


        # print('result', result)
        return ポーランドリスト[0], err
    
def 関数_演算子優先度(トークン):
    if 関数_数値か判別(トークン):
        演算子優先度 = 6
    elif トークン == '+' or トークン == '-':
        演算子優先度 = 1
    elif トークン == '*' or トークン == '/':
        演算子優先度 = 2
    elif トークン == '^':
        演算子優先度 = 3
    elif トークン == '√':
        演算子優先度 = 4
    elif トークン == 'E' or トークン =='e':
        演算子優先度 = 5
    elif トークン == '(' or トークン == ')':
        演算子優先度 = 7
    else:
        print('ERROR文字です')
    return 演算子優先度


def 関数_加算(数値文字1, 数値文字2):
    if '.' not in 数値文字1 and not '.' in 数値文字2:
        return int(数値文字1) + int(数値文字2)
    return float(数値文字1) + float(数値文字2)

def 関数_減算(数値文字1, 数値文字2):
    if '.' not in 数値文字1 and not '.' in 数値文字2:
        return int(数値文字1) - int(数値文字2)
    return float(数値文字1) - float(数値文字2)

def 関数_乗算(数値文字1, 数値文字2):
    if '.' not in 数値文字1 and not '.' in 数値文字2:
        return int(数値文字1) * int(数値文字2)
    return float(数値文字1) * float(数値文字2)

def 関数_徐算(数値文字1, 数値文字2):
    if '.' not in 数値文字1 and not '.' in 数値文字2:
        return int(数値文字1) / int(数値文字2)
    return float(数値文字1) / float(数値文字2)

def 関数_累乗算(数値文字1, 数値文字2):
    if '.' not in 数値文字1 and not '.' in 数値文字2:
        return int(数値文字1) ** int(数値文字2)
    return float(数値文字1) ** float(数値文字2)

def 関数_ルート(数値文字1):
    if float(数値文字1) < 0:
        print('エラー √(マイナス) です')
        return False
    # if '.' not in 数値文字1 and not '.' in 数値文字2:
        # return int(数値文字1) ** int(数値文字2)
    return float(数値文字1) ** 0.5

def 関数_指数表現(数値文字1, 数値文字2):
    
    return float(数値文字1+'E'+数値文字2)

def 関数_丸め誤差除去(数文字):

    if '.' not in 数文字:
        # print('a')
        return 数文字
    
    num数文字 = float(数文字)
    num数文字_小数部 = math.modf(num数文字)

    print('num数文字, num数文字_小数部',num数文字, num数文字_小数部)
    print(len(str(num数文字_小数部[0])), len(str(num数文字_小数部[1])))

    小数点以下桁数 = len(str(num数文字_小数部[0]))- len(str(num数文字_小数部[1]))

    print('小数点以下桁数',小数点以下桁数)

    if len(数文字) >= 18:
        num数文字 = round(num数文字, 小数点以下桁数)

    return num数文字

#     数文字処理後 = 数文字
#     数長 = len(数文字処理後)
#     # print('数長',数長)
#     数値処理後 = 数文字処理後[:-1]
#     # print('数値処理後',数値処理後)
#     count = 0
#     while True:
#         print('419数値処理後',数値処理後)
#         if 数値処理後[-1] == '0':
#             数値処理後 = 数値処理後[:-1]
#             count += 1
#             print(count)
#             if count >= 数長 - 1:
#                 break
#         else:
#             break
        
#     if count >= 5:
#         return 数値処理後
#     else:
#         return 数文字

# def 関数_b誤差繰り上げ(数文字):

#     数文字処理後 = 数文字
#     数長 = len(数文字処理後)
#     # print('数長',数長)
#     数値処理後 = 数文字処理後[:-1]
#     # print('数値処理後',数値処理後)
#     count = 0
#     while True:
#         print('443数値処理後',数値処理後)
#         if 数値処理後[-1] == '9':
#             数値処理後 = 数値処理後[:-1]
#             count += 1
#             print(count)
#             if count >= 数長 - 1:
#                 break
#         else:
#             break
        
#     if count >= 5:
#         return round(数値処理後, 数長)
#     else:
#         return 数文字



def 全体計算(入力文字式):

    文字式計算1 = class文字式計算('計算1',入力文字式,'', [], [], '')
    print('文字式計算1', 文字式計算1.name)


    補正入力文字式, err = 文字式計算1.メソッド_文字式補正()

    # print('518 補正文字入力式', 補正入力文字式)

    if err == '':
        # 補正入力文字式 = 補正入力文字式
        文字式計算1.補正入力文字式 = 補正入力文字式
    else:
        print('エラー 補正入力文字式')
        return ''

    
    字句解析リスト, err = 文字式計算1.メソッド_字句解析()
    if err == '':
        文字式計算1.字句解析リスト = 字句解析リスト
    else:
        print('エラー字句解析リスト作成')
        return ''

    逆ポーランドリスト, err = 文字式計算1.メソッド_逆ポーランド()
    if err == '':
        文字式計算1.逆ポーランドリスト = 逆ポーランドリスト

    else:
        print('エラー 逆ポーランドリスト作成')
        return ''

    計算結果文字, err = 文字式計算1.メソッド_計算()
    if err == '':
        計算結果文字 = 関数_丸め誤差除去(計算結果文字)
        return 計算結果文字
    
    else:
        print('エラー計算結果')
        return ''


def cal():
    入力文字式 = '√1E2+1'
    print('計算結果',全体計算(入力文字式))

# if __name__ == '__main__':

#     入力文字式 = '√1E2+1'
#     print('計算結果',全体計算(入力文字式))

    # 数文字 = str(float(1.12E-9+0.9E-12))
    # print('数文字', 数文字)
    # 数値処理結果 = 関数_b誤差除去(数文字)
    # print(数値処理結果)